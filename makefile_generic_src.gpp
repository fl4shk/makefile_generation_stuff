#ifdef GENERIC
#define DO_CXX
#define DO_C
#define DO_S
#define DO_NS
#define HAVE_DISASSEMBLE
#define HAVE_ONLY_PREPROCESS
#define HAVE_DEBUG
#endif
#if 0


#endif
#ifdef GBA
#define DO_CXX
#define DO_S
#define DO_ARM
#define HAVE_DISASSEMBLE
#define HAVE_DEBUG
#endif
#if 0


#endif
#define concat #1#2
#include "include/basic_gen_macros.gpp"
#include "include/gen_some_sources_macros.gpp"
#include "include/build_macros.gpp"
#if 0


#endif
# These directories specify where source code files are located.
# Edit these variables if more directories are needed.  
# Separate each entry by spaces.
SHARED_SRC_DIRS:=$(CURDIR) src
#ifdef GBA
BINARY_DIRS:=
#endif
#ifdef DO_CXX
CXX_DIRS:=$(SHARED_SRC_DIRS)
#endif
#ifdef DO_C
C_DIRS:=$(SHARED_SRC_DIRS)
#endif
#ifdef DO_S
S_DIRS:=$(SHARED_SRC_DIRS)
#endif
#ifdef DO_NS
# NASM Source Directories
# Note:  NS is a prefix for NASM in all cases
NS_DIRS:=$(SHARED_SRC_DIRS)
#endif

# End of source directories


# Comment out or un-comment out the next line to enable debugging stuff to
# be generated
#ifdef HAVE_DEBUG
DEBUG:=yeah do debug

DEBUG_OPTIMIZATION_LEVEL:=-O0
#endif
REGULAR_OPTIMIZATION_LEVEL:=-O2

#ifdef HAVE_DEBUG
ALWAYS_DEBUG_SUFFIX:=_debug
ifdef DEBUG
	DEBUG_SUFFIX:=$(ALWAYS_DEBUG_SUFFIX)
endif
#endif

# This is the name of the output file.  Change this if needed!
PROJ:=$(shell basename $(CURDIR))$(DEBUG_SUFFIX)

#if 0
INITIAL_BASE_FLAGS:=-Wall
#endif
#define INITIAL_BASE_FLAGS -Wall

#ifdef HAVE_DISASSEMBLE
# This is used for do_asmouts
VERBOSE_ASM_FLAG:=
#VERBOSE_ASM_FLAG:=-fverbose-asm

#endif
#if defined(GBA)
PREFIX:=$(DEVKITARM)/bin/arm-none-eabi-
#elif defined(DO_ARM)
PREFIX:=arm-none-eabi-

#endif

# Compilers and initial compiler flags
#ifdef DO_CXX
CXX:=$(PREFIX)g++
CXX_FLAGS:=$(CXX_FLAGS) -std=c++17 INITIAL_BASE_FLAGS

#endif
#if ( defined(DO_C) || !defined(DO_CXX) )
CC:=$(PREFIX)gcc
#endif
#ifdef DO_C
C_FLAGS:=$(C_FLAGS) -std=c11 INITIAL_BASE_FLAGS

#endif
#ifdef DO_S
AS:=$(PREFIX)as
#ifndef DO_ARM
S_FLAGS:=$(S_FLAGS) -mnaked-reg #-msyntax=intel
#endif

#endif
#ifdef DO_NS
NS:=nasm
NS_FLAGS:=$(NS_FLAGS) -f elf64

#endif
#ifdef HAVE_DISASSEMBLE
OBJDUMP:=$(PREFIX)objdump
#endif
#ifdef GBA
OBJCOPY:=$(PREFIX)objcopy
#endif
#ifdef DO_CXX
LD:=$(CXX)
#else
LD:=$(CC)
#endif

# Initial linker flags
LD_FLAGS:=$(LD_FLAGS) -lm



#ifdef HAVE_DEBUG
ifdef DEBUG
	EXTRA_DEBUG_FLAGS:=-g
	DEBUG_FLAGS:=-gdwarf-3 $(EXTRA_DEBUG_FLAGS)
	EXTRA_LD_FLAGS:=$(DEBUG_FLAGS)
	OPTIMIZATION_LEVEL:=$(DEBUG_OPTIMIZATION_LEVEL)
else
	OPTIMIZATION_LEVEL:=$(REGULAR_OPTIMIZATION_LEVEL)
endif
#else
OPTIMIZATION_LEVEL:=$(REGULAR_OPTIMIZATION_LEVEL)
#endif

#ifdef DO_ARM
#if 0
# EXTRA_BASE_FLAGS:=-mcpu=arm7tdmi -mtune=arm7tdmi -mthumb \\
# 	-mthumb-interwork \\
# 	-fno-threadsafe-statics -fno-rtti -nostartfiles
# EXTRA_BASE_FLAGS:=-mcpu=arm7tdmi -mtune=arm7tdmi -marm \\
# 	-mthumb-interwork \\
# 	-fno-threadsafe-statics -fno-rtti -nostartfiles
#endif
EXTRA_BASE_FLAGS:=-mcpu=arm7tdmi -mtune=arm7tdmi -mthumb \\
	-mthumb-interwork \\
	-fno-threadsafe-statics -nostartfiles
#EXTRA_BASE_FLAGS:=-mcpu=arm7tdmi -mtune=arm7tdmi -marm \\
#	-mthumb-interwork \\
#	-fno-threadsafe-statics -nostartfiles

EXTRA_LD_FLAGS:=$(EXTRA_LD_FLAGS) -mthumb --specs=nosys.specs -lm \\
	-lgcc -lc -lstdc++
#ifdef GBA
COMMON_LD_FLAGS:=$(COMMON_LD_FLAGS) -L$(DEVKITPRO)/libgba/lib \\
	-T $(LD_SCRIPT) -Wl,--entry=_start2 -lmm
#endif

#ifdef HAVE_DISASSEMBLE
DISASSEMBLE_BASE_FLAGS:=-marm7tdmi
#endif

#endif


FINAL_BASE_FLAGS:=$(OPTIMIZATION_LEVEL) \\
	$(EXTRA_BASE_FLAGS) $(EXTRA_DEBUG_FLAGS)

# Final compiler and linker flags
#ifdef DO_CXX
CXX_FLAGS:=$(CXX_FLAGS) $(FINAL_BASE_FLAGS)
#endif
#ifdef DO_C
C_FLAGS:=$(C_FLAGS) $(FINAL_BASE_FLAGS)
#endif
LD_FLAGS:=$(LD_FLAGS) $(EXTRA_LD_FLAGS) $(COMMON_LD_FLAGS)




# Generated directories
OBJDIR:=objs$(DEBUG_SUFFIX)
#ifdef HAVE_DISASSEMBLE
ASMOUTDIR:=asmouts$(DEBUG_SUFFIX)
#endif
DEPDIR:=deps$(DEBUG_SUFFIX)
#ifdef HAVE_CLEAN_OBJS_WITH_NO_SOURCE
OBJDIR_TEMP:=objs_temp$(DEBUG_SUFFIX)
#endif
#ifdef HAVE_ONLY_PREPROCESS
PREPROCDIR:=preprocs$(DEBUG_SUFFIX)
#endif

# Directories to search, specified at the top of this file
export VPATH	:=	\\
#ifdef GBA
	gen_vpath(BINARY) \\
#endif
#ifdef DO_CXX
	gen_vpath(CXX) \\
#endif
#ifdef DO_C
	gen_vpath(C) \\
#endif
#ifdef DO_S
	gen_vpath(S) \\
#endif
#ifdef DO_NS
	gen_vpath(NS) \\
#endif

#ifdef GBA
gen_sources(BIN,BINARY,bin)
gen_some_groups(BIN,bin)
#endif

#ifdef DO_CXX
gen_sources(CXX,CXX,cpp)
gen_some_groups(CXX,cpp)#ifdef HAVE_DISASSEMBLE
# Assembly source code generated by gcc/g++
gen_group(CXX_ASMOUTS,CXX_SOURCES,,cpp,s,ASMOUTDIR)
#endif


#endif
#ifdef DO_C
gen_sources(C,C,c)
gen_some_groups(C,c)#ifdef HAVE_DISASSEMBLE
# Assembly source code generated by gcc/g++
gen_group(C_ASMOUTS,C_SOURCES,,c,s,ASMOUTDIR)
#endif


#endif
#ifdef DO_S
gen_sources(S,S,s)
gen_some_groups(S,s)
#endif
#ifdef DO_NS
gen_sources(NS,S,nasm)
gen_some_groups(NS,nasm)
#endif
# Compiler-generated files
# OFILES are object code files (extension .o)
OFILES:=INTERNAL_OFILES_RHS
# PFILES are used for automatic dependency generation
PFILES:=INTERNAL_PFILES_RHS
#ifdef HAVE_CLEAN_OBJS_WITH_NO_SOURCE
# OFILES_TEMP are used for removing .o files with no corresponding source
# code.  This is a hack of some sort, and I recommend NOT using it!
OFILES_TEMP:=INTERNAL_OFILES_TEMP_RHS
#endif
#if ( defined(HAVE_DISASSEMBLE) && ( defined(DO_CXX) || defined(DO_C) ) )
ASMOUTS:=$(CXX_ASMOUTS) $(C_ASMOUTS)
#endif

#ifdef HAVE_ONLY_PREPROCESS
# Preprocessed output of only C++ files
gen_group(CXX_EFILES,CXX_SOURCES,,cpp,E,PREPROCDIR)
EFILES:=$(CXX_EFILES)
#endif


all : all_pre $(OFILES)
#ifndef GBA
	$(LD) $(OBJDIR)/*.o -o $(PROJ) $(LD_FLAGS)
#else
	$(LD) $(OBJDIR)/*.o -o $(PROJ).elf $(LD_FLAGS) -Wl,-M > linker_map.txt
	$(OBJCOPY) -O binary -S -g -R .iwram -R .sram $(PROJ).elf $(PROJ).gba
	./do_gbafix.sh
#endif

# all_objs is ENTIRELY optional.
all_objs : all_pre $(OFILES)
	@#

#ifdef HAVE_DISASSEMBLE
do_asmouts : all_pre all_pre_asmout $(ASMOUTS)
	@#
#endif

all_pre :
	mkdir -p $(OBJDIR) $(DEPDIR)

#ifdef HAVE_DISASSEMBLE
all_pre_asmout :
	mkdir -p $(ASMOUTDIR)
#endif

#ifdef GBA
$(BIN_OFILES) : $(OBJDIR)/%.bin.o : %.bin
	util/bin2o_gba.sh $< $@
#endif

# This sed script is basically a hack for dependency generation stuff.
sed_script:=$(shell echo "sed -e 's/\\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' -e '/^$$/ d' -e 's/$$/ :/'")


# Here's where things get really messy.
#ifdef DO_CXX
do_hll_build(CXX,cpp,CXX)

#endif
#ifdef DO_C
do_hll_build(CC,c,C)

#endif
#ifdef DO_NS
# For NASM sources, the dependency generation is somewhat different from
# that of C/C++ sources.
SHARED_REGULAR_BUILD_PART_1(NS,nasm)
	SHARED_REGULAR_BUILD_PART_2
	NASM_REGULAR_BUILD_PART_3
	$(NS) $(NS_FLAGS) $< -o $@ -MD $(DEPDIR)/$*.P

#endif
#ifdef DO_S
SHARED_REGULAR_BUILD_PART_1(S,s)
	SHARED_REGULAR_BUILD_PART_2
	ASM_REGULAR_BUILD_PART_3
	ASM_REGULAR_BUILD_PART_4(AS,S,OBJDIR,-c)
	ASM_REGULAR_BUILD_PART_5
	ASM_REGULAR_BUILD_PART_6
	ASM_REGULAR_BUILD_PART_7


#endif
#ifdef HAVE_DISASSEMBLE
#if ( defined(DO_CXX) || defined(DO_C) )
# Here we have stuff for outputting assembly source code instead of an object file.
#endif
#ifdef DO_CXX
do_hll_asmouts_build(CXX,cpp,CXX)

#endif
#ifdef DO_C
do_hll_asmouts_build(CC,c,C)
#endif
#endif

-include $(PFILES)

#ifdef HAVE_ONLY_PREPROCESS

only_preprocess : only_preprocess_pre $(EFILES)
	@#

only_preprocess_pre : 
	mkdir -p $(PREPROCDIR)


$(CXX_EFILES) : $(PREPROCDIR)/%.E : %.cpp
	$(CXX) $(CXX_FLAGS) -E $< -o $@


#endif
#¯\\(°_o)/¯

.PHONY : clean
clean :
	rm -rfv $(OBJDIR) $(DEPDIR) $(ASMOUTDIR) $(PREPROCDIR) $(PROJ) tags *.taghl gmon.out
#ifdef HAVE_CLEAN_OBJS_WITH_NO_SOURCE


# There is little point in using this
.PHONY : clean_objs_with_no_source
clean_objs_with_no_source :
	@mkdir -p $(OBJDIR_TEMP)
	@#ls $(OBJDIR)
	@echo "Removing object files that don't have corresponding source files...."
	@for objfile in $(OFILES); \\
	do \\
		if [ -f $$objfile ]; \\
		then \\
			mv $$objfile $(OBJDIR_TEMP); \\
		fi; \\
	done;
	@#ls $(OBJDIR_TEMP)
	@rm -rf $(OBJDIR)
	@mkdir -p $(OBJDIR)
	@for objfile in $(OFILES_TEMP); \\
	do \\
		if [ -f $$objfile ]; \\
		then \\
			mv $$objfile $(OBJDIR); \\
		fi; \\
	done;
	@#ls $(OBJDIR)
	@rmdir $(OBJDIR_TEMP)
	
	
	
	@#rm -rfv $(OBJDIR_TEMP)

#endif

#ifdef HAVE_DISASSEMBLE
# Flags for make disassemble*
DISASSEMBLE_FLAGS:=$(DISASSEMBLE_BASE_FLAGS) -C -d 
DISASSEMBLE_ALL_FLAGS:=$(DISASSEMBLE_BASE_FLAGS) -C -D 

DISASSEMBLE_2_FLAGS:=$(DISASSEMBLE_BASE_FLAGS) -C -S -l -d 
DISASSEMBLE_ALL_2_FLAGS:=$(DISASSEMBLE_BASE_FLAGS) -C -S -l -D 

.PHONY : disassemble
disassemble :
	$(OBJDUMP) $(DISASSEMBLE_FLAGS) $(PROJ)

.PHONY : disassemble_all
disassemble_all :
	$(OBJDUMP) $(DISASSEMBLE_ALL_FLAGS) $(PROJ)


.PHONY : disassemble_2
disassemble_2 :
	$(OBJDUMP) $(DISASSEMBLE_2_FLAGS) $(PROJ)

.PHONY : disassemble_all_2
disassemble_all_2 :
	$(OBJDUMP) $(DISASSEMBLE_ALL_2_FLAGS) $(PROJ)
#endif
