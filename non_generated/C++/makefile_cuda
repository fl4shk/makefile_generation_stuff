# Source directories
SRC_DIRS:=$(CURDIR) src


# building
CUDA_DIR:="/opt/cuda"
CUDA_BIN:=$(CUDA_DIR)/"bin"
CUDA_LIB64:=$(CUDA_DIR)/"lib64"
CXX:=$(CUDA_BIN)/nvcc -ccbin g++ 

#SHARED_FLAGS:=-m64 \
#	-gencode arch=compute_30,code=sm_30 \
#	-gencode arch=compute_35,code=sm_35 \
#	-gencode arch=compute_37,code=sm_37 \
#	-gencode arch=compute_50,code=sm_50 \
#	-gencode arch=compute_52,code=sm_52 \
#	-gencode arch=compute_60,code=sm_60 \
#	-gencode arch=compute_60,code=compute_60
SHARED_FLAGS:=-m64 \
	-gencode arch=compute_50,code=sm_50 \
	-gencode arch=compute_52,code=sm_52 \
	-gencode arch=compute_60,code=sm_60 \
	-gencode arch=compute_60,code=compute_60

CXX_FLAGS:=$(SHARED_FLAGS) --std c++11 -x cu

COMP:=$(CXX) $(CXX_FLAGS)

LD:=$(CXX)
LD_FLAGS:=$(SHARED_FLAGS)
LINK:=$(LD) $(LD_FLAGS)



#PROJ:=global_memory_test_1
PROJ:=$(shell basename $(CURDIR))

# Generated directories
OBJDIR:=objs$(DEBUG_SUFFIX)
DEPDIR:=deps$(DEBUG_SUFFIX)

RECURSIVE_MAKE:=$(MAKE) --no-print-directory

# Directories to search, specified at the top of this file
export VPATH	:=	\
	$(foreach DIR,$(SRC_DIRS),$(CURDIR)/$(DIR)) \


SRC_FILES:=$(foreach DIR,$(SRC_DIRS),$(notdir $(wildcard $(DIR)/*.cpp)))
OBJ_FILES:=$(SRC_FILES:%.cpp=$(OBJDIR)/%.o)
DEP_FILES:=$(SRC_FILES:%.cpp=$(DEPDIR)/%.P)


DIRS_TO_MAKE:=$(OBJDIR) $(DEPDIR)
TO_CLEAN_NON_DIRS:=$(OBJDIR)/*.o $(PROJ) tags *.taghl gmon.out
TO_CLEAN:=$(DIRS_TO_MAKE) $(TO_CLEAN_NON_DIRS)

#main.o: main.cpp main.hpp
all: 
	@$(RECURSIVE_MAKE) no_objs
	@$(RECURSIVE_MAKE) all_objs
	$(LINK) $(OBJDIR)/*.o -o $(PROJ)

no_objs:
	@$(RECURSIVE_MAKE) temp_clean
	@$(RECURSIVE_MAKE) all_pre
	@$(RECURSIVE_MAKE) all_deps


temp_clean:
	rm -rf $(TO_CLEAN_NON_DIRS)

all_pre: 
	mkdir -p $(DIRS_TO_MAKE)

all_deps: $(DEP_FILES)
	@#

all_objs: $(OBJ_FILES)
	@#@echo "all_objs"


$(OBJ_FILES) : $(OBJDIR)/%.o : %.cpp
	$(COMP) -dc $< -o $@

$(DEP_FILES) : $(DEPDIR)/%.P : %.cpp
	$(COMP) -M $< -o $@


.PHONY : clean
clean:
	rm -rfv $(TO_CLEAN)

.PHONY : profile
profile:
	export PATH=$(CUDA_BIN); \
	export LD_LIBRARY_PATH=$(CUDA_LIB64); \
	$(CUDA_BIN)/nvprof ./$(PROJ)
