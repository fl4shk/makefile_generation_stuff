# Source directories
CXX_SRC_DIRS:=$(CURDIR) src
C_SRC_DIRS:=$(CURDIR) src src/bb_modded


# Building
CUDA_DIR:="/opt/cuda"
CUDA_BIN:=$(CUDA_DIR)/"bin"
CUDA_LIB64:=$(CUDA_DIR)/"lib64"
CXX:=$(CUDA_BIN)/nvcc -ccbin g++ 
CC:=$(CUDA_BIN)/nvcc -ccbin gcc

#DEBUG_FLAGS:=
DEBUG_FLAGS:=-g
#DEBUG_FLAGS:=-g -G

#SHARED_FLAGS:=-m64 \
#	-gencode arch=compute_30,code=sm_30 \
#	-gencode arch=compute_35,code=sm_35 \
#	-gencode arch=compute_37,code=sm_37 \
#	-gencode arch=compute_50,code=sm_50 \
#	-gencode arch=compute_52,code=sm_52 \
#	-gencode arch=compute_60,code=sm_60 \
#	-gencode arch=compute_60,code=compute_60
#SHARED_FLAGS:=-m64 \
#	-gencode arch=compute_50,code=sm_50 \
#	-gencode arch=compute_52,code=sm_52 \
#	-gencode arch=compute_60,code=sm_60 \
#	-gencode arch=compute_60,code=compute_60
SHARED_FLAGS:=-m64 \
	-gencode arch=compute_60,code=sm_60 \
	-gencode arch=compute_60,code=compute_60 \
	$(DEBUG_FLAGS)



CXX_FLAGS:=$(SHARED_FLAGS) --std c++11 -x cu
C_FLAGS:=$(SHARED_FLAGS) -x c

COMP_CXX:=$(CXX) $(CXX_FLAGS)
COMP_C:=$(CC) $(C_FLAGS)

LD:=$(CXX)
LD_FLAGS:=$(SHARED_FLAGS)
LINK:=$(LD) $(LD_FLAGS)


PROJ:=$(shell basename $(CURDIR))
PROJ_PROFILE_ARGS:=

# Generated directories
OBJDIR:=objs$(DEBUG_SUFFIX)
DEPDIR:=deps$(DEBUG_SUFFIX)

# Directories to search, specified at the top of this file
export VPATH	:=	\
	$(foreach DIR,$(CXX_SRC_DIRS),$(CURDIR)/$(DIR)) \
	$(foreach DIR,$(C_SRC_DIRS),$(CURDIR)/$(DIR)) \


CXX_SRC_FILES:=$(foreach DIR,$(CXX_SRC_DIRS),$(notdir $(wildcard $(DIR)/*.cpp)))
CXX_OBJ_FILES:=$(CXX_SRC_FILES:%.cpp=$(OBJDIR)/%.o)
CXX_DEP_FILES:=$(CXX_SRC_FILES:%.cpp=$(DEPDIR)/%.P)

C_SRC_FILES:=$(foreach DIR,$(C_SRC_DIRS),$(notdir $(wildcard $(DIR)/*.c)))
C_OBJ_FILES:=$(C_SRC_FILES:%.c=$(OBJDIR)/%.o)
C_DEP_FILES:=$(C_SRC_FILES:%.c=$(DEPDIR)/%.P)

OBJ_FILES:=$(CXX_OBJ_FILES) $(C_OBJ_FILES)
DEP_FILES:=$(CXX_DEP_FILES) $(C_DEP_FILES)


DIRS_TO_MAKE:=$(OBJDIR) $(DEPDIR)
TO_CLEAN_NON_DIRS:=$(OBJDIR)/*.o $(PROJ) tags *.taghl gmon.out
TO_CLEAN:=$(DIRS_TO_MAKE) $(TO_CLEAN_NON_DIRS)

all : all_pre $(OBJ_FILES)
	$(LINK) $(OBJDIR)/*.o -o $(PROJ)

all_pre: 
	mkdir -p $(DIRS_TO_MAKE)

all_objs: $(OBJ_FILES)
	@#@echo "all_objs"



$(CXX_OBJ_FILES) : $(OBJDIR)/%.o : %.cpp
	@$(COMP_CXX) -M $< -o $(OBJDIR)/$*.d
	@echo "$(OBJDIR)/$$(cat $(OBJDIR)/$*.d)" > $(DEPDIR)/$*.P
	@rm $(OBJDIR)/$*.d
	$(COMP_CXX) -dc $< -o $@

$(C_OBJ_FILES) : $(OBJDIR)/%.o : %.c
	@$(COMP_C) -M $< -o $(OBJDIR)/$*.d
	@echo "$(OBJDIR)/$$(cat $(OBJDIR)/$*.d)" > $(DEPDIR)/$*.P
	@rm $(OBJDIR)/$*.d
	$(COMP_C) -dc $< -o $@

-include $(DEP_FILES)

.PHONY : clean
clean:
	rm -rfv $(TO_CLEAN)

.PHONY : profile_from_start
profile_from_start:
	export PATH=$(CUDA_BIN); \
	export LD_LIBRARY_PATH=$(CUDA_LIB64); \
	$(CUDA_BIN)/nvprof ./$(PROJ) $(PROJ_PROFILE_ARGS)

.PHONY : profile
profile:
	export PATH=$(CUDA_BIN); \
	export LD_LIBRARY_PATH=$(CUDA_LIB64); \
	$(CUDA_BIN)/nvprof --profile-from-start off ./$(PROJ) \
	$(PROJ_PROFILE_ARGS)
